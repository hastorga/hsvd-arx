function [value] = ar(data,memo, horizonte, train_percent)# Data#y = load("DataAR.dat");#y = data;#y = [1,2,3,4,5,6,7,8,9,10,11,12];# Settingstest_percent = 1-train_percent;y = data';lag = memo;rows80 = 0;velue = 0;# Autocorrelation#result = acor(y,lag);# Limits#upper = 1.96/sqrt(size(y,1)-lag);#upper = upper*ones(1,lag+1);#lower = -1.96/sqrt(size(y,1)-lag);#lower = lower*ones(1,lag+1);# Plotting#stem(result);#hold on#plot(upper);#hold on#plot(lower);#figure(2);#plot(y)#mat = rvector(y,lag);rmat = vectorregresor(lag, horizonte, y);#rmat= mat(lag+1:size(mat,1),1:size(mat,2));rows = size(rmat,1);rows20 = ceil((rows*test_percent) - 1);columns = size(rmat,2);x = 0;# Next Codey2 = rmat(1:rows,1);x = rmat(1:rows,2:columns);#yTrain = y2(1:rows*0.8,1);#xTrain = x(1:rows*0.8,:);#yTest = y2(rows-rows20:rows,1);#xTest = x(rows-rows20:rows,:);#yTrain = y2(1:size(y2,1)-118,1);y2_training_size = int16(size(y2,1) * train_percent) +1 ;x_training_size = int16(size(x,1) * train_percent) +1 ;training_y = y2(1:y2_training_size);training_x = x(1:x_training_size, :);size(training_x)testing_x = x(size(x,1)-2:end,:);#xTrain = x(1:size(x,1)-118,:);#yTest = y2(size(y2,1)-117:end,1);xTest = x(size(x,1)-118:end,:);#size_testing_x = size(xTest)A = pinv(training_x) * training_y;value = xTest * A;#x = (1:size(Y,1));#figure(1)#plot(y,"b");#hold on#figure(3)#plot(Y,"r");#hold on#figure(2)#plot(yTrain,"g");end